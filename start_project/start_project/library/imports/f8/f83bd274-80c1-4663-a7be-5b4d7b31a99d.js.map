{"version":3,"sources":["assets\\scripts\\Star.js"],"names":["cc","Class","Component","properties","pickRadius","getPlayerDistance","playerPos","game","player","getPosition","dist","node","position","sub","mag","onPicked","spawnNewStar","gainScore","destroy","start","update","dt","opacityRatio","timer","starDuration","minOpacity","opacity","Math","floor"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACR,aAASD,EAAE,CAACE,SADJ;AAGRC,EAAAA,UAAU,EAAE;AACX;AACAC,IAAAA,UAAU,EAAE;AAFD,GAHJ;AAQR;AACAC,EAAAA,iBAAiB,EAAE,6BAAW;AAC7B;AACA,QAAIC,SAAS,GAAG,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,WAAjB,EAAhB,CAF6B,CAG7B;;AACA,QAAIC,IAAI,GAAG,KAAKC,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuBP,SAAvB,EAAkCQ,GAAlC,EAAX;AACA,WAAOJ,IAAP;AACA,GAfO;AAiBRK,EAAAA,QAAQ,EAAE,oBAAW;AACpB;AACA,SAAKR,IAAL,CAAUS,YAAV,GAFoB,CAGpB;;AACA,SAAKT,IAAL,CAAUU,SAAV,GAJoB,CAKpB;;AACA,SAAKN,IAAL,CAAUO,OAAV;AACA,GAxBO;AAyBR;AAEAC,EAAAA,KA3BQ,mBA2BA,CAEP,CA7BO;AA+BRC,EAAAA,MAAM,EAAE,gBAASC,EAAT,EAAa;AACpB;AACA,QAAI,KAAKhB,iBAAL,KAA2B,KAAKD,UAApC,EAAgD;AAC/C;AACA,WAAKW,QAAL;AACA;AACA,KANmB,CAOpB;;;AACA,QAAIO,YAAY,GAAG,IAAI,KAAKf,IAAL,CAAUgB,KAAV,GAAkB,KAAKhB,IAAL,CAAUiB,YAAnD;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,SAAKd,IAAL,CAAUe,OAAV,GAAoBD,UAAU,GAAGE,IAAI,CAACC,KAAL,CAAWN,YAAY,IAAI,MAAMG,UAAV,CAAvB,CAAjC;AACA;AA1CO,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n\textends: cc.Component,\r\n\r\n\tproperties: {\r\n\t\t// 星星和主角之间的距离小于这个数值时，就会完成收集\r\n\t\tpickRadius: 0,\r\n\t},\r\n\r\n\t// LIFE-CYCLE CALLBACKS:\r\n\tgetPlayerDistance: function() {\r\n\t\t// 根据 player 节点位置判断距离\r\n\t\tvar playerPos = this.game.player.getPosition();\r\n\t\t// 根据两点位置计算两点之间距离\r\n\t\tvar dist = this.node.position.sub(playerPos).mag();\r\n\t\treturn dist;\r\n\t},\r\n\r\n\tonPicked: function() {\r\n\t\t// 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\r\n\t\tthis.game.spawnNewStar();\r\n\t\t// 调用 Game 脚本的得分方法\r\n\t\tthis.game.gainScore();\r\n\t\t// 然后销毁当前星星节点\r\n\t\tthis.node.destroy();\r\n\t},\r\n\t// onLoad () {},\r\n\r\n\tstart() {\r\n\r\n\t},\r\n\r\n\tupdate: function(dt) {\r\n\t\t// 每帧判断和主角之间的距离是否小于收集距离\r\n\t\tif (this.getPlayerDistance() < this.pickRadius) {\r\n\t\t\t// 调用收集行为\r\n\t\t\tthis.onPicked();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// 根据 Game 脚本中的计时器更新星星的透明度\r\n\t\tvar opacityRatio = 1 - this.game.timer / this.game.starDuration;\r\n\t\tvar minOpacity = 50;\r\n\t\tthis.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\r\n\t},\r\n});\n"]}